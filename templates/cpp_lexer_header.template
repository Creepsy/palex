#pragma once

#include <cstddef>
#include <string>
#include <istream>
#include <stack>
%FALLBACK_INCLUDES%

namespace %LEXER_NAMESPACE% {
    struct CharacterPosition {
        size_t line = 1;
        size_t column = 1;

        void advance(const char32_t consumed);
    };

    struct Token {
        enum class TokenType {
            %TOKEN_TYPE_ENUM%
        };

        TokenType type;
        std::u32string identifier;
        CharacterPosition position;

        bool is_ignored() const;
    };

    class %LEXER_NAME% {
        public:
            %LEXER_NAME%(std::istream& input);
            Token next_token();
            Token next_unignored_token();
            bool end() const;
        private:
            %FALLBACK_TYPES%
            char32_t get_char();

            std::istream& input;
            CharacterPosition curr_position;
            std::stack<char32_t> cache;
            %FALLBACK_CACHE%
    };

    std::ostream& operator<<(std::ostream& output, const CharacterPosition& to_print);
    std::ostream& operator<<(std::ostream& output, const Token& to_print);
    std::ostream& operator<<(std::ostream& output, const Token::TokenType to_print);
}
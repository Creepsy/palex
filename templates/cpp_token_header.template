#pragma once

#include <cstddef>
#include <ostream>
#include <string_view>

#include <utf8.h>

namespace %MODULE_NAME% {
    struct FilePosition {
        size_t line = 1;
        size_t column = 1;

        void advance(const utf8::Codepoint_t consumed);
    };

    struct %UNIT_NAME%Token {
        enum class TokenType {
%TOKEN_TYPE_ENUM%
        };

        TokenType type;
        std::string_view identifier;
        FilePosition begin;
        FilePosition end;

        bool is_ignored() const;
    };

    std::ostream& operator<<(std::ostream& output, const FilePosition& to_print);
    std::ostream& operator<<(std::ostream& output, const %UNIT_NAME%Token& to_print);
    std::ostream& operator<<(std::ostream& output, const %UNIT_NAME%Token::TokenType to_print);
}
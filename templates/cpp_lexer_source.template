#include "%UNIT_NAME%Lexer.h"

#include <utf8.h>

constexpr size_t ERROR_STATE = (size_t)-1;

namespace %MODULE_NAME% {
    %UNIT_NAME%Lexer::%UNIT_NAME%Lexer() : %UNIT_NAME%Lexer(std::string_view{}) {}

    %UNIT_NAME%Lexer::%UNIT_NAME%Lexer(const std::string_view input)
     : input{input}, position{this->input.data()}, curr_token{%UNIT_NAME%Token::TokenType::UNDEFINED} {}

    void %UNIT_NAME%Lexer::set_input(const std::string_view new_input) {
        this->input = new_input;
        this->position = this->input.data();
    } 

    %UNIT_NAME%Token::TokenType %UNIT_NAME%Lexer::next_token() {
        %FALLBACK_CLEAR%
        const FilePosition token_file_position = this->file_position;
        size_t state = 0;
        const char* identifier_begin = this->position;
        const auto create_token = [&, this](const %UNIT_NAME%Token::TokenType type) -> %UNIT_NAME%Token {
            return PalexRuleToken{type, std::string_view(identifier_begin, (size_t)(this->position - identifier_begin)), token_file_position, this->file_position};
        };
        if (this->end()) {
            this->curr_token = create_token(%UNIT_NAME%Token::TokenType::END_OF_FILE);
            return this->current_token().type;
        }
        utf8::Codepoint_t current_codepoint = 0;
        const char* next_position = utf8::advance_codepoint(this->position, this->input.end(), &current_codepoint);
        
        while (true) {
            switch (state) {
%STATES%%ERROR_STATE%
            }
            this->file_position.advance(current_codepoint);
            this->position = next_position;
            next_position = utf8::advance_codepoint(this->position, this->input.end(), &current_codepoint);
        }
    }

    %UNIT_NAME%Token::TokenType %UNIT_NAME%Lexer::next_unignored_token() {
        do {
            this->next_token();
        } while (this->current_token().is_ignored());
        return this->current_token().type;
    }

    const %UNIT_NAME%Token& %UNIT_NAME%Lexer::current_token() const {
        return this->curr_token;
    }

    bool %UNIT_NAME%Lexer::end() const {
        return this->position == this->input.end();
    }

    %FALLBACK_FUNCTION%
}
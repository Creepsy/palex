#include "%LEXER_NAME%.h"

#include <array>

#include "%UTF8_LIB_PATH%/utf8.h"

constexpr size_t ERROR_STATE = (size_t)-1;
const std::array<std::string, %TOKEN_TYPE_COUNT%> TOKEN_TYPE_TO_STRING {
%TOKEN_TYPE_STRINGS%
};

void %LEXER_NAMESPACE%::CharacterPosition::advance(const char32_t consumed) {
    if (consumed == (char32_t)'\n') {
        this->line++;
        this->column = 1;
    } else {
        this->column++;
    }
}

bool %LEXER_NAMESPACE%::Token::is_ignored() const {
    return this->type > TokenType::%LAST_NORMAL_TOKEN%;
}

%LEXER_NAMESPACE%::%LEXER_NAME%::%LEXER_NAME%(std::istream& input) : input{input}, curr_position{} {
}

%LEXER_NAMESPACE%::Token %LEXER_NAMESPACE%::%LEXER_NAME%::next_token() {
    %PRE_STATE_MACHINE_FALLBACK%
    const CharacterPosition token_start = this->curr_position;
    size_t state = 0;
    std::u32string identifier = U"";
    char32_t curr = this->get_char();
    if (this->end()) {
        return Token{Token::TokenType::END_OF_FILE, U"", token_start};
    }

    while (true) {
        this->cache.push(curr);
        switch(state) {
%STATES%%ERROR_STATE%
        }
        identifier += this->cache.top();
        this->cache.pop();
        curr = this->get_char();
    }
}

%LEXER_NAMESPACE%::Token %LEXER_NAMESPACE%::%LEXER_NAME%::next_unignored_token() {
    Token unignored{};

    do {
        unignored = this->next_token();
    } while (unignored.is_ignored());

    return unignored;
}

bool %LEXER_NAMESPACE%::%LEXER_NAME%::end() const {
    return this->input.eof() && this->cache.empty();
}

char32_t %LEXER_NAMESPACE%::%LEXER_NAME%::get_char() {
    if (!this->cache.empty()) {
        char32_t cached = this->cache.top();
        this->cache.pop();

        return cached;
    }

    return utf8::get_unicode_char(this->input);
}

%RESTORE_FALLBACK_FUNC%

std::ostream& %LEXER_NAMESPACE%::operator<<(std::ostream& output, const CharacterPosition& to_print) {
    return output << "[Ln " << to_print.line << ", Col " << to_print.column << "]";
}

std::ostream& %LEXER_NAMESPACE%::operator<<(std::ostream& output, const Token& to_print) {
    return output << to_print.position << " " << to_print.type << " " << to_print.identifier;
}

std::ostream& %LEXER_NAMESPACE%::operator<<(std::ostream& output, const Token::TokenType to_print) {
    return output << TOKEN_TYPE_TO_STRING.at((size_t)to_print);
}